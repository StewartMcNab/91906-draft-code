#Author: Stewart
#Maths Quiz Final Version
#04/08/2025

import random
from tkinter import *
from tkinter import PhotoImage

class MathQuizApp:
    def __init__(self, root):
        self.root = root
        root.title("Math Quiz")
        root.geometry("640x480")
        
        self.score = 0
        self.question_count = 0
        self.difficulty = "Easy"
        self.time_left = 60  # 60-second timer
        self.timer_job = None
        
        # MAIN MENU WINDOW
        self.menu_frame = Frame(root, bg="lightblue")
        self.menu_frame.pack(fill="both", expand=True)
        Label(self.menu_frame, text="Binary Bros Math Quiz!", font=("Lucida Console", 20), bg="lightblue").pack(pady=30)
        Label(self.menu_frame, text="Enter your name:", font=("Lucida Console", 14), bg="lightblue").pack(pady=10)
        self.name_entry = Entry(self.menu_frame, font=("Arial", 14))
        self.name_entry.pack(pady=5)
        Button(self.menu_frame, text="Start game", font="Terminal", bg="skyblue",  command=self.check_name).pack()#start game btn
        Button(self.menu_frame, text="Quit", font="Terminal", bg="red", command=self.root.destroy).pack(pady=10)#quit game btn
        self.logo_img = PhotoImage(file="binarybros2.png")  # Load the image
        Label(self.menu_frame, image=self.logo_img, bg="lightblue").pack(pady=10)
        
        # DIFFICULTY WINDOW
        self.diff_frame = Frame(root, bg="lightblue") #difficulty btns
        Label(self.diff_frame, text="Choose Difficulty", font=("Lucida Console", 18), bg="lightblue",).pack(pady=20)
        Button(self.diff_frame, text="Easy",  font="Terminal", bg="lightgreen", command=lambda: self.start_quiz("Easy")).pack(pady=5)
        Button(self.diff_frame, text="Medium",  font="Terminal", bg="yellow", command=lambda: self.start_quiz("Medium")).pack(pady=5)
        Button(self.diff_frame, text="Hard",  font="Terminal", bg="red", command=lambda: self.start_quiz("Hard")).pack(pady=5)
        self.bob_img = PhotoImage(file="bob.png")  # Load the image
        Label(self.diff_frame, image=self.bob_img, bg="lightblue").pack(pady=10)
        
        # QUIZ WINDOW
        self.quiz_frame = Frame(root, bg="lightblue")
        self.timer_label = Label(self.quiz_frame, text="Time: 60", font=("Georgia", 12), bg="lightblue")
        self.timer_label.pack(pady=5)
        
        self.question_label = Label(self.quiz_frame, text="", font=("Lucida Console", 16), bg="lightblue")
        self.question_label.pack(pady=10)
        
        self.answer_entry = Entry(self.quiz_frame)
        self.answer_entry.pack()
        
        self.feedback_label = Label(self.quiz_frame, text="", font=("Arial", 14))
        self.feedback_label.pack(pady=10)
        
        Button(self.quiz_frame, text="Submit", font="Terminal", bg="lightblue", command=self.check_answer).pack(pady=5)
        Button(self.quiz_frame, text="Return to menu", font="Terminal", bg="orange", command=self.return_to_menu).pack(pady=5)
        self.bob2_img = PhotoImage(file="bob2.png")  # Load the image
        Label(self.quiz_frame, image=self.bob2_img, bg="lightblue").pack(pady=10)
        
        # SCORE WINDOW
        self.score_frame = Frame(root, bg="lightblue")
        self.score_label = Label(self.score_frame, text="", font=("Arial", 18), bg="lightblue")
        self.score_label.pack(pady=30)
        Button(self.score_frame, text="Play Again", font="Terminal", bg="skyblue", command=self.restart).pack()
        Button(self.score_frame, text="Quit", font="Terminal", bg="skyblue",  command=self.root.destroy).pack(pady=10)

    def check_name(self):
        name = self.name_entry.get().strip()
        if name == "":
            self.name_entry.config(bg="mistyrose")
        else:
            self.player_name = name  # Store the name if needed
            self.name_entry.config(bg="white")
            self.show_difficulty()


    def return_to_menu(self):
        if self.timer_job:
            self.root.after_cancel(self.timer_job)
            self.timer_job = None
        self.quiz_frame.pack_forget()
        self.menu_frame.pack(fill="both", expand=True)
        
    def show_difficulty(self):
        self.menu_frame.pack_forget()
        self.diff_frame.pack(fill="both", expand=True)
    
    def start_quiz(self, difficulty):
        self.difficulty = difficulty
        self.score = 0
        self.question_count = 0
        self.time_left = 60  # Reset timer
        self.diff_frame.pack_forget()
        self.quiz_frame.pack(fill="both", expand=True)
        self.start_timer()
        self.next_question()
    
    def start_timer(self):
        if self.time_left > 0 and self.question_count < 10:
            self.timer_label.config(text=f"Time: {self.time_left}")
            self.time_left -= 1
            self.timer_job = self.root.after(1000, self.start_timer)  # Call again after 1 second
        else:
            self.show_score()  # Time’s up — show score
    
    def next_question(self):
        self.question_count += 1
        self.answer_entry.delete(0, END)
        self.feedback_label.config(text="")
        
        # Generate question based on difficulty
        if self.difficulty == "Easy":
            self.num1 = random.randint(1, 10)
            self.num2 = random.randint(1, 10)
            self.operator = "+"

        elif self.difficulty == "Medium":
            self.num1 = random.randint(10, 50)
            self.num2 = random.randint(10, 50)
            self.operator = random.choice(["+", "-"])

        else:  # Hard
            self.num1 = random.randint(10, 20)
            self.num2 = random.randint(1, 10)
            self.operator = random.choice(["*", "+", "-"])

#calculate answer based on +, -, *
        if self.operator == "+":
            self.answer = self.num1 + self.num2
        elif self.operator == "-":
            self.answer = self.num1 - self.num2
        elif self.operator == "*":
            self.answer = self.num1 * self.num2
        
        self.question_label.config(text=f"Q{self.question_count}: {self.num1} {self.operator} {self.num2} = ?")
    
    def check_answer(self):
        try:
            user_answer = int(self.answer_entry.get())
        except ValueError:
            self.feedback_label.config(text="Please enter a valid number!", fg="red", bg="lightblue")#invalid inputs
            return
 #score 1 point for correct question      
        if user_answer == self.answer:
            self.score += 1
            self.feedback_label.config(text="Correct!", fg="green", bg="lightblue")
        else:
            self.feedback_label.config(text=f"Wrong! The answer was {self.answer}", fg="red", bg="lightblue")
#end quiz after finishing 10th question        
        if self.question_count >= 10:
            self.show_score()
        else:
            self.root.after(1500, self.next_question)
    
    def show_score(self):
        self.quiz_frame.pack_forget()
        self.score_label.config(text=f"Your score: {self.score} / 10\nTime left: {self.time_left} seconds") 
        self.score_frame.pack(fill="both", expand=True)
    
    def restart(self):
        self.score_frame.pack_forget()
        self.menu_frame.pack()


if __name__ == "__main__":
    root = Tk()
    app = MathQuizApp(root)
    root.mainloop()
